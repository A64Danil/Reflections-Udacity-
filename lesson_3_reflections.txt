When would you want to use a remote repository rather than keeping all your work local?
  I would to use remote, when i work form different diveses, like my laptop or my home PC. So I don't need to additional saving, 
  that's acting direclty.
  
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
  If I'll pull changes automaticaly, so when i start my work, i can left my code. I need to pull when i ready to pull. Else i don't need to pull. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?
  Форк - клон чужой репы на гитхабе. Клон - копирование к себе на локал из ремот. Ветка - альтернативная история коммитов.
  
What is the benefit of having a copy of the last known state of the remote stored locally?
  Выгода обладания копии последнего известного состояния удаленного сервера, сохраненного локально, в том, что нам не нужно подключаться
  по интернету, чтобы увидеть разницу между текущим проектом и проектом на сервере, а так же в возможности быстро выполнить diff между этими версиями.
  
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
  Без гита и хаба мне бы пришлось создать общую директорию, куда бы мы все сливали файлы. Труднее было бы наблюдать историю изменений этих файлов и не возможно было бы выполнять merge-действия. Легче было бы сохранять файлы и держать проект в одном месте.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
  Я захочу изменять отдельную ветку, а не мастер тогда, когда наж веткой мастер кто-то еще ведет работу и я не хочу ему мешать. Вместо этого, я создаю новую ветку, куда пишу свои изменения, а затем сливаю мастер-ветку в свою, обобщая их. Таким образом, работники ветки мастер смогут быстро (fast-forward merge) обновнить свою ветку до моих изменений и продолжить работу. Преимущества подхода в том, что мы не мешаем друг другу и разные компоненты кода пишутся и коммитятся отдельно. Недостатки в том, что в итоге приходится сливать две ветки и решать конфликты, а так же содержание двух веток вместо одной.
